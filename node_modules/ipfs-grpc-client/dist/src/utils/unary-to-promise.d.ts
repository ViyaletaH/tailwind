/**
 * @typedef {import('http').Agent} HttpAgent
 * @typedef {import('https').Agent} HttpsAgent
 */
/**
 * Unary calls are one-to-one operations so this function
 * takes a client message and returns a promise that resolves
 * to the server response.
 *
 * @param {import('@improbable-eng/grpc-web').grpc} grpc - an @improbable-eng/grpc-web instance
 * @param {*} service - an @improbable-eng/grpc-web service
 * @param {any} request - a request object
 * @param {import('../types').RPCOptions<any>} options - RPC options
 * @returns {Promise<any>} - A promise that resolves to a response object
 **/
export function unaryToPromise(grpc: typeof import("@improbable-eng/grpc-web").grpc, service: any, request: any, options: import('../types').RPCOptions<any>): Promise<any>;
export type HttpAgent = import('http').Agent;
export type HttpsAgent = import('https').Agent;
//# sourceMappingURL=unary-to-promise.d.ts.map
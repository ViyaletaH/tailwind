/**
 * @typedef {import('http').Agent} HttpAgent
 * @typedef {import('https').Agent} HttpsAgent
 */
/**
 * Server stream methods are one-to-many operations so this
 * function accepts a client message and returns a source
 * from which multiple server messages can be read.
 *
 * @param {import('@improbable-eng/grpc-web').grpc} grpc - an @improbable-eng/grpc-web instance
 * @param {*} service - an @improbable-eng/grpc-web service
 * @param {object} request - a request object
 * @param {import('../types').RPCOptions<any>} options - RPC options
 * @returns {AsyncIterable<any>}
 **/
export function serverStreamToIterator(grpc: typeof import("@improbable-eng/grpc-web").grpc, service: any, request: object, options: import('../types').RPCOptions<any>): AsyncIterable<any>;
export type HttpAgent = import('http').Agent;
export type HttpsAgent = import('https').Agent;
//# sourceMappingURL=server-stream-to-iterator.d.ts.map
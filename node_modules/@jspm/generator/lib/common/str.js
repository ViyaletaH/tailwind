const wsRegEx = /^\s+/;
export class Replacer {
    replace(start, end, replacement) {
        const startOffset = findOffset(this.offsetTable, start);
        const endOffset = findOffset(this.offsetTable, end);
        this.source = this.source.slice(0, start + startOffset) + replacement + this.source.slice(end + endOffset);
        addOffset(this.offsetTable, end, replacement.length - (end + endOffset - start - startOffset));
    }
    remove(start, end, trimWs = false) {
        this.replace(start, end, "");
        if (trimWs) {
            if (typeof trimWs === "boolean") trimWs = wsRegEx;
            const endIndex = this.idx(end);
            var _this_source_slice_match;
            const [wsMatch] = (_this_source_slice_match = this.source.slice(endIndex).match(trimWs)) !== null && _this_source_slice_match !== void 0 ? _this_source_slice_match : [];
            var _ref;
            this.source = this.source.slice(0, endIndex) + this.source.slice((_ref = endIndex + (wsMatch === null || wsMatch === void 0 ? void 0 : wsMatch.length)) !== null && _ref !== void 0 ? _ref : 0);
            var _ref1;
            addOffset(this.offsetTable, end, (_ref1 = -(wsMatch === null || wsMatch === void 0 ? void 0 : wsMatch.length)) !== null && _ref1 !== void 0 ? _ref1 : 0);
        }
    }
    idx(idx) {
        return idx + findOffset(this.offsetTable, idx);
    }
    constructor(source){
        this.offsetTable = [];
        this.source = source;
    }
}
function addOffset(offsetTable, idx, offset) {
    let i = offsetTable.length, eq = false;
    while(i-- > 0){
        const [offsetIdx] = offsetTable[i];
        if (offsetIdx < idx || offsetIdx === idx && (eq = true)) break;
    }
    if (eq) offsetTable.splice(i, 1, [
        idx,
        offset + offsetTable[i][1]
    ]);
    else offsetTable.splice(i + 1, 0, [
        idx,
        offset
    ]);
}
function findOffset(offsetTable, idx) {
    let curOffset = 0;
    for (const [offsetIdx, offset] of offsetTable){
        if (offsetIdx > idx) break;
        curOffset += offset;
    }
    return curOffset;
}


//# sourceMappingURL=str.js.map
function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _classApplyDescriptorUpdate(receiver, descriptor) {
    if (descriptor.set) {
        if (!descriptor.get) {
            throw new TypeError("attempted to read set only private field");
        }
        if (!("__destrWrapper" in descriptor)) {
            descriptor.__destrWrapper = {
                set value (v){
                    descriptor.set.call(receiver, v);
                },
                get value () {
                    return descriptor.get.call(receiver);
                }
            };
        }
        return descriptor.__destrWrapper;
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        return descriptor;
    }
}
function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
    return _classApplyDescriptorGet(receiver, descriptor);
}
function _classPrivateFieldInit(obj, privateMap, value) {
    _checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
    _classApplyDescriptorSet(receiver, descriptor, value);
    return value;
}
function _classPrivateFieldUpdate(receiver, privateMap) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "update");
    return _classApplyDescriptorUpdate(receiver, descriptor);
}
var _POOL_SIZE = /*#__PURE__*/ new WeakMap(), _opCnt = /*#__PURE__*/ new WeakMap(), _cbs = /*#__PURE__*/ new WeakMap();
export class Pool {
    async queue() {
        if (++_classPrivateFieldUpdate(this, _opCnt).value > _classPrivateFieldGet(this, _POOL_SIZE)) await new Promise((resolve)=>_classPrivateFieldGet(this, _cbs).push(resolve));
    }
    pop() {
        _classPrivateFieldUpdate(this, _opCnt).value--;
        const cb = _classPrivateFieldGet(this, _cbs).pop();
        if (cb) cb();
    }
    constructor(POOL_SIZE){
        _classPrivateFieldInit(this, _POOL_SIZE, {
            writable: true,
            value: 10
        });
        _classPrivateFieldInit(this, _opCnt, {
            writable: true,
            value: 0
        });
        _classPrivateFieldInit(this, _cbs, {
            writable: true,
            value: []
        });
        _classPrivateFieldSet(this, _POOL_SIZE, POOL_SIZE);
    }
}


//# sourceMappingURL=pool.js.map
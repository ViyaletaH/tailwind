import * as deno from "./deno.js";
import * as jspm from "./jspm.js";
import * as skypack from "./skypack.js";
import * as jsdelivr from "./jsdelivr.js";
import * as unpkg from "./unpkg.js";
import * as node from "./node.js";
import * as esmsh from "./esmsh.js";
import { JspmError } from "../common/err.js";
export const defaultProviders = {
    deno,
    jsdelivr,
    node,
    skypack,
    unpkg,
    "esm.sh": esmsh,
    "jspm.io": jspm,
    // TODO: remove at some point, alias for backwards compatibility:
    jspm
};
export function getProvider(name, providers) {
    const provider = providers[name];
    if (provider) return provider;
    throw new JspmError(`No provider named "${name}" has been defined.`);
}
export function getDefaultProviderStrings() {
    let res = [];
    for (const [name, provider] of Object.entries(defaultProviders)){
        // TODO: remove the jspm alias at some point along with this hack:
        if (name === "jspm") continue;
        var _provider_supportedLayers;
        for (const layer of (_provider_supportedLayers = provider.supportedLayers) !== null && _provider_supportedLayers !== void 0 ? _provider_supportedLayers : [
            "default"
        ])res.push(`${name}${layer === "default" ? "" : `#${layer}`}`);
    }
    return res;
}
export const registryProviders = {
    "denoland:": "deno",
    "deno:": "deno"
};
export const mappableSchemes = new Set([
    "npm",
    "deno",
    "node"
]);
export const builtinSchemes = new Set([
    "node",
    "deno"
]);


//# sourceMappingURL=index.js.map
{"version":3,"sources":["../src/url.ts"],"names":[],"mappings":"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","file":"url.js","sourcesContent":["declare global {\r\n  // @ts-ignore\r\n  var document: any;\r\n  // @ts-ignore\r\n  var location: any;\r\n  // @ts-ignore\r\n  var process: any;\r\n}\r\n\r\nexport let baseUrl: URL;\r\n// @ts-ignore\r\nif (typeof Deno !== \"undefined\") {\r\n  // @ts-ignore\r\n  baseUrl = new URL(\"file://\" + Deno.cwd() + \"/\");\r\n} else if (typeof process !== \"undefined\" && process.versions?.node) {\r\n  baseUrl = new URL(\"file://\" + process.cwd() + \"/\");\r\n} else if ((typeof document as any) !== \"undefined\") {\r\n  const baseEl: any | null = document.querySelector(\"base[href]\");\r\n  if (baseEl)\r\n    baseUrl = new URL(baseEl.href + (baseEl.href.endsWith(\"/\") ? \"\" : \"/\"));\r\n  else if (typeof location !== \"undefined\")\r\n    baseUrl = new URL(\"../\", new URL(location.href));\r\n}\r\n\r\nexport function getCommonBase(a: string, b: string): string {\r\n  if (a.startsWith(b)) return b;\r\n  if (b.startsWith(a)) return a;\r\n  const aSegments = a.split(\"/\");\r\n  const bSegments = b.split(\"/\");\r\n  let i = 0;\r\n  while (aSegments[i] === bSegments[i]) i++;\r\n  return aSegments.slice(0, i).join(\"/\") + \"/\";\r\n}\r\n\r\nexport function sameOrigin(url: URL, baseUrl: URL) {\r\n  return (\r\n    url.protocol === baseUrl.protocol &&\r\n    url.host === baseUrl.host &&\r\n    url.port === baseUrl.port &&\r\n    url.username === baseUrl.username &&\r\n    url.password === baseUrl.password\r\n  );\r\n}\r\n\r\nexport function resolve(url: string, mapUrl: URL, rootUrl: URL | null): string {\r\n  if (url.startsWith(\"/\"))\r\n    return rootUrl\r\n      ? new URL(\".\" + url.slice(url[1] === \"/\" ? 1 : 0), rootUrl).href\r\n      : url;\r\n  return new URL(url, mapUrl).href;\r\n}\r\n\r\nexport function rebase(url: string, baseUrl: URL, rootUrl: URL | null = null) {\r\n  let resolved;\r\n  if (url.startsWith(\"/\") || url.startsWith(\"//\")) {\r\n    if (rootUrl === null) return url;\r\n    resolved = new URL(url, rootUrl);\r\n  } else {\r\n    resolved = new URL(url, baseUrl);\r\n  }\r\n  if (rootUrl && resolved.href.startsWith(rootUrl.href))\r\n    return resolved.href.slice(rootUrl.href.length - 1);\r\n  if (rootUrl && rootUrl.href.startsWith(resolved.href)) {\r\n    // edge-case\r\n    return \"/\" + relative(resolved, rootUrl);\r\n  }\r\n  if (sameOrigin(resolved, baseUrl)) return relative(resolved, baseUrl);\r\n  return resolved.href;\r\n}\r\n\r\nexport function relative(url: URL, baseUrl: URL) {\r\n  const baseUrlPath = baseUrl.pathname;\r\n  const urlPath = url.pathname;\r\n  const minLen = Math.min(baseUrlPath.length, urlPath.length);\r\n  let sharedBaseIndex = -1;\r\n  for (let i = 0; i < minLen; i++) {\r\n    if (baseUrlPath[i] !== urlPath[i]) break;\r\n    if (urlPath[i] === \"/\") sharedBaseIndex = i;\r\n  }\r\n  const backtracks =\r\n    baseUrlPath.slice(sharedBaseIndex + 1).split(\"/\").length - 1;\r\n  return (\r\n    (backtracks ? \"../\".repeat(backtracks) : \"./\") +\r\n    urlPath.slice(sharedBaseIndex + 1) +\r\n    url.search +\r\n    url.hash\r\n  );\r\n}\r\n\r\nexport function isURL(specifier: string) {\r\n  try {\r\n    if (specifier[0] === \"#\") return false;\r\n    new URL(specifier);\r\n  } catch {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function isPlain(specifier: string) {\r\n  return !isRelative(specifier) && !isURL(specifier);\r\n}\r\n\r\nexport function isRelative(specifier: string) {\r\n  return (\r\n    specifier.startsWith(\"./\") ||\r\n    specifier.startsWith(\"../\") ||\r\n    specifier.startsWith(\"/\")\r\n  );\r\n}\r\n"]}